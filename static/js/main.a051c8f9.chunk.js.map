{"version":3,"sources":["Comp/Colors.js","Comp/Navbar.jsx","Comp/Footer.jsx","Pages/HomePage.jsx","PageRouter.jsx","App.js","serviceWorker.js","index.js","Comp/Navbar.module.scss"],"names":["Color","primaryColor","primaryFontColor","primaryColorComplimentary","secondaryColor","btnHoverBackgroundColor","btnHoverFontColor","lightTextColorComplimentary","darkTextColor","complimentaryTextColor","logoColor","lightTextColor","skillCardBackgroundColor","Navbar","className","styles","navbarContainer","navbar","href","src","process","navbarLinks","to","btn","Footer","jsx","Colors","HomePage","props","PageRouter","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"qNAeeA,G,YAfD,CACZC,aAAc,UACdC,iBAAkB,UAClBC,0BAA2B,UAC3BC,eAAgB,UAChBC,wBAAyB,wBACzBC,kBAAmB,UACnBC,4BAA6B,UAC7BC,cAAe,UACfC,uBAAwB,UACxBC,UAAW,UACXC,eAAgB,UAChBC,yBAA0B,Y,8BCiBbC,EAzBA,WACb,OACE,yBAAKC,UAAWC,IAAOC,iBACrB,yBAAKF,UAAWC,IAAOE,QACrB,4BACE,uBAAGC,KAAK,6BACN,yBAAKC,IAAG,UAAKC,aAAL,2BAGZ,yBAAKN,UAAWC,IAAOM,aACrB,kBAAC,IAAD,CAASC,GAAG,eAAeR,UAAWC,IAAOQ,KAA7C,SAGA,uBAAGT,UAAWC,IAAOQ,IAAKL,KAAK,wBAA/B,aAGA,uBAAGJ,UAAWC,IAAOQ,IAAKL,KAAK,yBAA/B,gBCuBKM,EAxCA,WACb,OACE,yBAAKV,UAAU,oBACb,yBAAKA,UAAU,aACb,uBAAGI,KAAK,sCACN,uBAAGJ,UAAU,4BAEf,uBAAGI,KAAK,KACN,uBAAGJ,UAAU,2BAEf,uBAAGI,KAAK,mDACN,uBAAGJ,UAAU,2BAEf,wEAEF,2BAAOW,KAAG,GAAV,0PASaC,EAAOvB,0BATpB,yIAcauB,EAAOnB,4BAdpB,iGCDSoB,EAbE,SAACC,GAChB,OACE,yBAAKd,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,OAEF,6BAASA,UAAU,YACjB,kBAAC,EAAD,SCIOe,EAXI,SAACD,GAClB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,KAAK,eAAeC,UAAW,kBAAM,qCAC5C,kBAAC,IAAD,CAAOD,KAAK,aAAaC,UAAW,kBAAM,qCAC1C,kBAAC,IAAD,CAAOD,KAAK,SAASC,UAAW,kBAAM,qCACtC,kBAAC,IAAD,CAAOD,KAAK,IAAIC,UAAWJ,MCUlBK,EAfH,SAACJ,GACX,OACE,kBAAC,IAAD,KACE,yBAAKd,UAAU,OACb,kBAAC,EAAD,MACA,2BAAOW,KAAG,GAAV,iDAEaC,EAAOxB,iBAFpB,gCCEY+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBExI5BC,EAAOC,QAAU,CAAC,gBAAkB,gCAAgC,OAAS,uBAAuB,YAAc,+B","file":"static/js/main.a051c8f9.chunk.js","sourcesContent":["const Color = {\n  primaryColor: \"#111D2B\",\n  primaryFontColor: \"#D9F2FF\",\n  primaryColorComplimentary: \"#85704D\",\n  secondaryColor: \"#BED6F1\",\n  btnHoverBackgroundColor: \"rgba(235,216,183,0.7)\",\n  btnHoverFontColor: \"#172639\",\n  lightTextColorComplimentary: \"#FFEAC7\",\n  darkTextColor: \"#172639\",\n  complimentaryTextColor: \"#A18F6F\",\n  logoColor: \"#E3C084\",\n  lightTextColor: \"#E0EFFF\",\n  skillCardBackgroundColor: \"#284263\",\n};\n\nexport default Color;\n","import React from \"react\";\nimport styles from \"./Navbar.module.scss\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Navbar = () => {\n  return (\n    <div className={styles.navbarContainer}>\n      <div className={styles.navbar}>\n        <h1>\n          <a href=\"http://zehao99.github.io/\">\n            <img src={`${process.env.PUBLIC_URL}/img/logo-light.png`} />\n          </a>\n        </h1>\n        <div className={styles.navbarLinks}>\n          <NavLink to=\"/collections\" className={styles.btn}>\n            About\n          </NavLink>\n          <a className={styles.btn} href=\"https://philipli.art\">\n            Portfolio\n          </a>\n          <a className={styles.btn} href=\"https://calories.page\">\n            Calories\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport Colors from \"./Colors\";\n\nconst Footer = () => {\n  return (\n    <div className=\"footer-container\">\n      <div className=\"sns-icons\">\n        <a href=\"https://www.instagram.com/zehao99/\">\n          <i className=\"fab fa-instagram fa-2x\"></i>\n        </a>\n        <a href=\"#\">\n          <i className=\"far fa-envelope fa-2x\"></i>\n        </a>\n        <a href=\"https://www.linkedin.com/in/zehao-li-49ab9615b/\">\n          <i className=\"fab fa-linkedin fa-2x\"></i>\n        </a>\n        <p>Zehao Li, 2020 &copy; all rights reserved.</p>\n      </div>\n      <style jsx>{`\n        .footer-container {\n          text-align: center;\n        }\n        .footer-container .sns-icons {\n          margin-top: 1rem;\n        }\n        .footer-container .sns-icons a {\n          padding: 0 1rem;\n          color: ${Colors.primaryColorComplimentary};\n          transition: all 0.3s ease-in-out;\n        }\n\n        .footer-container .sns-icons a:hover {\n          color: ${Colors.lightTextColorComplimentary};\n        }\n\n        .footer-container p {\n          padding: 1rem;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport Navbar from \"../Comp/Navbar\";\nimport Footer from \"../Comp/Footer\";\n\nconst HomePage = (props) => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Navbar />\n      </header>\n      <section className=\"App-body\">\n        <Footer />\n      </section>\n    </div>\n  );\n};\n\nexport default HomePage;\n","import React from \"react\";\nimport { Route, NavLink, Switch, Redirect } from \"react-router-dom\";\nimport HomePage from \"./Pages/HomePage\";\n\nconst PageRouter = (props) => {\n  return (\n    <Switch>\n      <Route path=\"/collections\" component={() => <h1>Hi</h1>} />\n      <Route path=\"/landscape\" component={() => <h1>Hi</h1>} />\n      <Route path=\"/about\" component={() => <h1>Hi</h1>} />\n      <Route path=\"/\" component={HomePage} />\n    </Switch>\n  );\n};\n\nexport default PageRouter;\n","import React from \"react\";\nimport \"./App.css\";\nimport Colors from \"./Comp/Colors\";\nimport PageRouter from \"./PageRouter\";\nimport { BrowserRouter } from \"react-router-dom\";\nconst App = (props) => {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <PageRouter />\n        <style jsx>{`\n          body {\n            color: ${Colors.primaryFontColor};\n          }\n        `}</style>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbarContainer\":\"Navbar_navbarContainer__2-s-m\",\"navbar\":\"Navbar_navbar__ZV8bY\",\"navbarLinks\":\"Navbar_navbarLinks__kVieN\"};"],"sourceRoot":""}