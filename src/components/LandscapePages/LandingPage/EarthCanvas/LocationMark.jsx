/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.0 location_mark.glb
*/

import React, { useRef, useState } from 'react';
import { useGLTF } from '@react-three/drei';
import { useFrame } from '@react-three/fiber';

const rangeTarget = [0.6, 1.0];
const yRangeTarget = [0, 0.02];
const FRAME_TO_GO = 60;

const LocationMark = (props) => {


    const { nodes, materials } = useGLTF('/img/location_mark.glb');

    const [circleBounceTarget, setCircleBounceTarget] = useState(rangeTarget[1]);
    const [wholeYBounceTarget, setWholeYBounceTarget] = useState(yRangeTarget[1]);
    const [bounceFrameLeft, setBounceFrameLeft] = useState(FRAME_TO_GO);
    const [currentGroupY, setCurrentGroupY] = useState(0);

    const toggleBounceTarget = () => {
        setCircleBounceTarget((prev) => {
            if (prev === rangeTarget[0]) {
                return rangeTarget[1];
            } else {
                return rangeTarget[0];
            }
        });
        setWholeYBounceTarget((prev) => {
            if (prev === yRangeTarget[0]) {
                return yRangeTarget[1];
            } else {
                return yRangeTarget[0];
            }
        });
        setBounceFrameLeft(FRAME_TO_GO);
    };

    const circleRef = useRef();
    const groupRef = useRef();

    const setCircleBoundPosition = () => {
        const currCircleX = circleRef.current.position.x;
        const currGroupY = currentGroupY;

        let diffCircleX = circleBounceTarget - currCircleX;
        let diffGroupY = wholeYBounceTarget - currGroupY;

        setBounceFrameLeft(prev => prev - 1);
        if (bounceFrameLeft == 1) {
            toggleBounceTarget();
        }
        circleRef.current.position.setX(currCircleX + diffCircleX / bounceFrameLeft * 2);
        setCurrentGroupY(currGroupY + diffGroupY / bounceFrameLeft * 2);
    };


    useFrame(({ clock }) => {
        setCircleBoundPosition();
    });

    return (
        <group {...props} dispose={null}
               ref={groupRef}
               position={[props.position.x, props.position.y + currentGroupY, props.position.z]}>
            <mesh geometry={nodes.Circle.geometry}
                  material={materials['Material.002']} position={[0.07, 2.47, 0]}
                  rotation={[0, 0, -Math.PI / 2]} />
            <mesh geometry={nodes.Circle001.geometry} material={materials['Material.003']} position={[0, 2.5, 0]}
                  rotation={[0, 0, -Math.PI / 2]} scale={1.08} />
            <mesh geometry={nodes.Cylinder.geometry} material={materials['Material.004']} position={[0.42, 2.46, 0]}
                  rotation={[0, 0, -Math.PI / 2]} scale={[0.84, 0.18, 0.84]} />
            <mesh ref={circleRef} geometry={nodes.Cylinder001.geometry} material={materials['Material.001']}
                  position={[1.05, 2.46, 0]}
                  rotation={[0, 0, -Math.PI / 2]} scale={[0.92, 0.2, 0.92]} />
        </group>
    );
};

useGLTF.preload('/img/location_mark.glb');

export default LocationMark;
